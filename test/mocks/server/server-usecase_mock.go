// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/server/deps.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/server/deps.go -destination=test/mocks/server/server-usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/rAch-kaplin/mipt-golang-course/MetricsService/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricGetter is a mock of MetricGetter interface.
type MockMetricGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricGetterMockRecorder
	isgomock struct{}
}

// MockMetricGetterMockRecorder is the mock recorder for MockMetricGetter.
type MockMetricGetterMockRecorder struct {
	mock *MockMetricGetter
}

// NewMockMetricGetter creates a new mock instance.
func NewMockMetricGetter(ctrl *gomock.Controller) *MockMetricGetter {
	mock := &MockMetricGetter{ctrl: ctrl}
	mock.recorder = &MockMetricGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricGetter) EXPECT() *MockMetricGetterMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricGetter) GetAllMetrics(ctx context.Context) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricGetterMockRecorder) GetAllMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricGetter)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockMetricGetter) GetMetric(ctx context.Context, mType, mName string) (models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, mType, mName)
	ret0, _ := ret[0].(models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricGetterMockRecorder) GetMetric(ctx, mType, mName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricGetter)(nil).GetMetric), ctx, mType, mName)
}

// MockMetricUpdater is a mock of MetricUpdater interface.
type MockMetricUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdaterMockRecorder
	isgomock struct{}
}

// MockMetricUpdaterMockRecorder is the mock recorder for MockMetricUpdater.
type MockMetricUpdaterMockRecorder struct {
	mock *MockMetricUpdater
}

// NewMockMetricUpdater creates a new mock instance.
func NewMockMetricUpdater(ctrl *gomock.Controller) *MockMetricUpdater {
	mock := &MockMetricUpdater{ctrl: ctrl}
	mock.recorder = &MockMetricUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdater) EXPECT() *MockMetricUpdaterMockRecorder {
	return m.recorder
}

// UpdateMetric mocks base method.
func (m *MockMetricUpdater) UpdateMetric(ctx context.Context, mType, mName string, mValue any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", ctx, mType, mName, mValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricUpdaterMockRecorder) UpdateMetric(ctx, mType, mName, mValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricUpdater)(nil).UpdateMetric), ctx, mType, mName, mValue)
}

// UpdateMetricList mocks base method.
func (m *MockMetricUpdater) UpdateMetricList(ctx context.Context, metrics []models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricList", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetricList indicates an expected call of UpdateMetricList.
func (mr *MockMetricUpdaterMockRecorder) UpdateMetricList(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricList", reflect.TypeOf((*MockMetricUpdater)(nil).UpdateMetricList), ctx, metrics)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
	isgomock struct{}
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
	isgomock struct{}
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCollector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCollectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCollector)(nil).Close))
}

// GetAllMetrics mocks base method.
func (m *MockCollector) GetAllMetrics(ctx context.Context) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockCollectorMockRecorder) GetAllMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockCollector)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockCollector) GetMetric(ctx context.Context, mType, mName string) (models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, mType, mName)
	ret0, _ := ret[0].(models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockCollectorMockRecorder) GetMetric(ctx, mType, mName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockCollector)(nil).GetMetric), ctx, mType, mName)
}

// UpdateMetric mocks base method.
func (m *MockCollector) UpdateMetric(ctx context.Context, mType, mName string, mValue any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", ctx, mType, mName, mValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockCollectorMockRecorder) UpdateMetric(ctx, mType, mName, mValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockCollector)(nil).UpdateMetric), ctx, mType, mName, mValue)
}

// UpdateMetricList mocks base method.
func (m *MockCollector) UpdateMetricList(ctx context.Context, metrics []models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricList", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetricList indicates an expected call of UpdateMetricList.
func (mr *MockCollectorMockRecorder) UpdateMetricList(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricList", reflect.TypeOf((*MockCollector)(nil).UpdateMetricList), ctx, metrics)
}
