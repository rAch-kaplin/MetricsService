// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/metrics.go
//
// Generated by this command:
//
//	mockgen -source=internal/models/metrics.go -destination=test/mocks/models/metrics_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetric is a mock of Metric interface.
type MockMetric struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMockRecorder
	isgomock struct{}
}

// MockMetricMockRecorder is the mock recorder for MockMetric.
type MockMetricMockRecorder struct {
	mock *MockMetric
}

// NewMockMetric creates a new mock instance.
func NewMockMetric(ctrl *gomock.Controller) *MockMetric {
	mock := &MockMetric{ctrl: ctrl}
	mock.recorder = &MockMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetric) EXPECT() *MockMetricMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockMetric) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockMetricMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMetric)(nil).Name))
}

// Type mocks base method.
func (m *MockMetric) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockMetricMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMetric)(nil).Type))
}

// Update mocks base method.
func (m *MockMetric) Update(mValue any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", mValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMetricMockRecorder) Update(mValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetric)(nil).Update), mValue)
}

// Value mocks base method.
func (m *MockMetric) Value() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockMetricMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockMetric)(nil).Value))
}
